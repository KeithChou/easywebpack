
        ;(function (modules) {
            console.error(modules)
            function require (filename) {
                function innerRequire (relativePath) {
                    return require(modules[filename].dependencies[relativePath])
                }

                var module = { exports: {} }
                ;(function (require, module, exports, code) {
                    eval(code)
                })(innerRequire, module, module.exports, modules[filename].code)
                return module.exports
            }

            require('./src/commonjs/main.js')
        })({"./src/commonjs/main.js":{"dependencies":{"./Person.js":"./src/commonjs/Person.js","./Life.js":"./src/commonjs/Life.js"},"code":"\"use strict\";\n\nvar Person = require('./Person.js');\n\nvar Life = require('./Life.js');\n\nexports.Person = Person;\nexports.Life = Life;"},"./src/commonjs/Person.js":{"dependencies":{"./Life.js":"./src/commonjs/Life.js"},"code":"\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Life = require('./Life.js').Life;\n\nvar Person = /*#__PURE__*/function () {\n  function Person() {\n    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var job = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n    _classCallCheck(this, Person);\n\n    this.name = name;\n    this.job = job;\n  }\n\n  _createClass(Person, [{\n    key: \"getPerson\",\n    value: function getPerson() {\n      console.log(\"This is \".concat(this.name, \", My job is \").concat(this.job));\n      return {\n        name: this.name,\n        job: this.job\n      };\n    }\n  }, {\n    key: \"getLife\",\n    value: function getLife() {\n      var life = new Life('Shen Zhen', 'sun');\n      return life.getLife();\n    }\n  }]);\n\n  return Person;\n}();\n\nmodule.exports = Person;"},"./src/commonjs/Life.js":{"dependencies":{},"code":"\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Life = /*#__PURE__*/function () {\n  function Life() {\n    var live = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var weather = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n    _classCallCheck(this, Life);\n\n    this.live = live;\n    this.weather = weather;\n  }\n\n  _createClass(Life, [{\n    key: \"getLife\",\n    value: function getLife() {\n      return {\n        live: this.live,\n        weather: this.weather\n      };\n    }\n  }]);\n\n  return Life;\n}();\n\nexports.Life = Life;"}})
    